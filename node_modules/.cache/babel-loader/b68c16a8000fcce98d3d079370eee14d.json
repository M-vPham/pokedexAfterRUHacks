{"ast":null,"code":"import _slicedToArray from \"/Users/m_vpham/Desktop/Projects/pokedexAfterRUHacks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/m_vpham/Desktop/Projects/pokedexAfterRUHacks/src/App.js\";\nimport React, { useState, createRef } from 'react';\nimport { Grid, Segment, Header, Button, Icon, Ref, Sticky, Modal, Image, Label, Divider } from 'semantic-ui-react';\nimport * as R from 'ramda';\nimport './index.css'; //name of the array is pokemon\n\nimport pokemon from './pokemonDatabase.json'; // Define a function that returns a pokemon give pokedex_number, if true will return the desiredPokemon\n\nconst getPokemon = desiredPokedexNumber => {\n  //Have to assign function to a const to use with another input later on (curry)\n  const isDesiredPokemon = R.propEq(\"pokedex_number\", desiredPokedexNumber);\n  return R.find(isDesiredPokemon)(pokemon);\n}; //To git push, you have to add the files to your local repository (git add .) or (git add _fileName_), \n//and then commit them (git commit -m \"message\"). Then PUSH THEM to your github to your desired branch (git push origin _branchName_)\n\n\nfunction App() {\n  // You have to use react state in a component\n  // team: the state variable\n  // setTeam: the function that assigns the value to team\n  // [stateVariableName, setStateVariableName]\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        team = _useState2[0],\n        setTeam = _useState2[1]; // isTeamFull: [] => Bool\n  //compose is f(g(x)) => r.equals(6)(R.length(x))\n  //do the function inside first then apply it to function f\n  //Ramda will automatically curry\n\n\n  const isTeamNotFull = R.compose(R.not, R.equals(6), R.length); //destructuring objects in the curly braces\n  //curly braces defines the object\n\n  const teamMemberSegment = ({\n    name,\n    pokedex_number,\n    classfication\n  }) => //if you iterate in react, each component needs a unique key\n  React.createElement(Segment, {\n    key: pokedex_number,\n    className: \"segment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, name, React.createElement(Button, {\n    floated: \"right\",\n    size: \"small\",\n    labelPosition: \"right\",\n    onClick: (event, data) => {\n      let index = R.indexOf(pokedex_number, team); // only possible because setTeam is in scope already\n      // otherwise would need to pass as component prop\n\n      setTeam(R.remove(index, 1, team));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"close\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })));\n\n  const contextRef = createRef();\n  return React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Ref, {\n    innerRef: contextRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    basic: true,\n    className: \"segment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, R.map(({\n    name,\n    pokedex_number,\n    classfication,\n    type1,\n    type2,\n    entry\n  }) => React.createElement(Segment, {\n    key: pokedex_number,\n    basic: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    attached: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Image, {\n    circular: true,\n    src: require(\"./sprites/\".concat(pokedex_number, \".png\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), \"\".concat(name), React.createElement(Divider, {\n    horizontal: true,\n    hidden: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Header.Subheader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Label.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Label, {\n    content: \"No.\",\n    detail: pokedex_number,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Label, {\n    content: \"Type 1:\",\n    detail: type1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), //if truthy value then it will render the Label content\n  type2 && React.createElement(Label, {\n    content: \"Type 2\",\n    detail: type2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }))))), React.createElement(Button.Group, {\n    attached: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"const infoModal = () => (\", React.createElement(Modal, {\n    trigger: React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Info\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, name), React.createElement(Modal.Content, {\n    image: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Image, {\n    width: \"70\",\n    height: \"70\",\n    src: require(\"./sprites/\".concat(pokedex_number, \".png\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(Modal.Description, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"The \".concat(classfication)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"\".concat(entry))))), \"} )\", React.createElement(Button, {\n    content: \"Add to team\",\n    onClick: (event, data) => {\n      console.log(event, data);\n\n      if (isTeamNotFull(team)) {\n        setTeam(R.append(pokedex_number, team));\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }))), pokemon))), React.createElement(Grid.Column, {\n    width: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Sticky, {\n    context: contextRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    basic: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Segment.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, R.compose( //map applies a function every element in the array and returns the transformed array (not mutated)\n  R.map(teamMemberSegment), R.map(getPokemon))(team))))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/m_vpham/Desktop/Projects/pokedexAfterRUHacks/src/App.js"],"names":["React","useState","createRef","Grid","Segment","Header","Button","Icon","Ref","Sticky","Modal","Image","Label","Divider","R","pokemon","getPokemon","desiredPokedexNumber","isDesiredPokemon","propEq","find","App","team","setTeam","isTeamNotFull","compose","not","equals","length","teamMemberSegment","name","pokedex_number","classfication","event","data","index","indexOf","remove","contextRef","map","type1","type2","entry","require","console","log","append"],"mappings":"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","sourcesContent":["import React, {useState, createRef} from 'react'\nimport {Grid, Segment, Header, Button, Icon, Ref, Sticky, Modal, Image, Label, Divider} from 'semantic-ui-react'\nimport * as R from 'ramda'\nimport './index.css'\n\n//name of the array is pokemon\nimport pokemon from './pokemonDatabase.json'\n// Define a function that returns a pokemon give pokedex_number, if true will return the desiredPokemon\nconst getPokemon = desiredPokedexNumber => {\n  //Have to assign function to a const to use with another input later on (curry)\n  const isDesiredPokemon = R.propEq(\"pokedex_number\", desiredPokedexNumber)\n  return R.find(isDesiredPokemon)(pokemon)\n}\n//To git push, you have to add the files to your local repository (git add .) or (git add _fileName_), \n//and then commit them (git commit -m \"message\"). Then PUSH THEM to your github to your desired branch (git push origin _branchName_)\n\n\n\n\nfunction App() {\n  // You have to use react state in a component\n  // team: the state variable\n  // setTeam: the function that assigns the value to team\n  // [stateVariableName, setStateVariableName]\n  // team: array of pokedex_number\n  const [team, setTeam] = useState([])\n  // isTeamFull: [] => Bool\n  //compose is f(g(x)) => r.equals(6)(R.length(x))\n  //do the function inside first then apply it to function f\n  //Ramda will automatically curry\n  const isTeamNotFull = R.compose(\n    R.not,\n    R.equals(6),\n    R.length\n  )\n  //destructuring objects in the curly braces\n  //curly braces defines the object\n  const teamMemberSegment = ({name, pokedex_number, classfication}) => (\n  \n    //if you iterate in react, each component needs a unique key\n    <Segment key={pokedex_number} className='segment'>\n      {name}\n      <Button floated='right' size=\"small\" labelPosition='right'\n        onClick={\n        (event, data) => {\n          let index = R.indexOf(pokedex_number, team)\n          // only possible because setTeam is in scope already\n          // otherwise would need to pass as component prop\n          setTeam(R.remove(index, 1, team))\n        }\n      }>\n        <Icon name='close' />\n      </Button>\n    </Segment>\n  )\n\n  const contextRef = createRef()\n  return (\n    <Grid>\n      <Ref innerRef={contextRef}>\n      <Grid.Row>\n        <Grid.Column width={10}>\n          <Segment basic className='segment'>\n          {\n            R.map(\n              ({name, pokedex_number, classfication, type1, type2, entry}) => (\n                <Segment key={pokedex_number} basic>\n                  <Segment attached>\n                    <Header >\n                      <Image circular src={require(`./sprites/${pokedex_number}.png`)}/>\n                      {`${name}`}\n                      <Divider horizontal hidden />\n                      <Header.Subheader>\n                        <Label.Group>\n                          <Label content='No.' detail={pokedex_number} />\n                          <Label content='Type 1:' detail={type1} />\n                          {\n                            //if truthy value then it will render the Label content\n                            type2 && <Label content='Type 2' detail={type2} />\n                          }\n                        </Label.Group>\n                      </Header.Subheader>\n                    </Header>\n                  </Segment>\n                  <Button.Group attached=\"bottom\">\n                  const infoModal = () => (\n                    <Modal trigger = {<Button>Info</Button>}>\n                      <Modal.Header>{name}</Modal.Header>\n                      <Modal.Content image>\n                        {/* To access the images dynamically, have a property that you pass in that's the same as the name */}\n                        <Image width=\"70\" height=\"70\" src={require(`./sprites/${pokedex_number}.png`)}/>\n                        <Modal.Description>\n                          <p>{`The ${classfication}`}</p>\n                          <p>{`${entry}`}</p>\n                        </Modal.Description>\n                      </Modal.Content>\n                    </Modal>\n}\n                  )\n                    <Button content=\"Add to team\"\n                      onClick={\n                        (event, data) => {\n                          console.log(event, data)\n                          if (isTeamNotFull(team)) {\n                            setTeam(R.append(pokedex_number, team))\n                          }\n                        }\n                      }\n\n                    />\n                  </Button.Group>\n                </Segment>\n              ),\n              pokemon\n            )\n          }\n          </Segment>\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <Sticky context={contextRef}>\n          <Segment basic>\n            <Segment.Group>\n              {\n                R.compose(\n                  //map applies a function every element in the array and returns the transformed array (not mutated)\n                  R.map(teamMemberSegment),\n                  R.map(getPokemon)\n                )(team)\n              }\n              {/* {JSON.stringify(team)} */}\n            </Segment.Group>\n          </Segment>\n          </Sticky>\n        </Grid.Column>\n      </Grid.Row>\n      </Ref>\n    </Grid>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}