{"ast":null,"code":"import _slicedToArray from \"/Users/m_vpham/Desktop/Projects/pokedexAfterRUHacks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/m_vpham/Desktop/Projects/pokedexAfterRUHacks/src/App.js\";\nimport React, { useState } from 'react';\nimport { Grid, Segment, Header, Button, Icon } from 'semantic-ui-react';\nimport * as R from 'ramda'; //name of the array is pokemon\n\nimport pokemon from './pokemonDatabase.json'; // Define a function that returns a pokemon give pokedex_number, if true will return the desiredPokemon\n\nconst getPokemon = desiredPokedexNumber => {\n  //Have to assign function to a const to use with another input later on (curry)\n  const isDesiredPokemon = R.propEq(\"pokedex_number\", desiredPokedexNumber);\n  return R.find(isDesiredPokemon)(pokemon);\n}; //destructuring objects in the curly braces\n//curly braces defines the object\n\n\nconst teamMemberSegment = ({\n  name,\n  pokedex_number\n}) => //if you iterate in react, each component needs a unique key\nReact.createElement(Segment, {\n  key: pokedex_number,\n  floated: \"right\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, name, React.createElement(Button, {\n  floated: \"right\",\n  size: \"small\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, React.createElement(Icon, {\n  name: \"close\",\n  labelPosition: \"right\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n})));\n\nfunction App() {\n  // You have to use react state in a component\n  // team: the state variable\n  // setTeam: the function that assigns the value to team\n  // [stateVariableName, setStateVariableName]\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        team = _useState2[0],\n        setTeam = _useState2[1]; // isTeamFull: [] => Bool\n  //compose is f(g(x)) => r.equals(6)(R.length(x))\n  //do the function inside first then apply it to function f\n  //Ramda will automatically curry\n\n\n  const isTeamNotFull = R.compose(R.not, R.equals(6), R.length);\n  return React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    basic: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, R.map(({\n    name,\n    pokedex_number\n  }) => React.createElement(Segment, {\n    key: pokedex_number,\n    basic: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    attached: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Header, {\n    content: \"\".concat(pokedex_number, \" \").concat(name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(Button.Group, {\n    attached: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Info\"), React.createElement(Button, {\n    content: \"Add to team\",\n    onClick: (event, data) => {\n      console.log(event, data);\n\n      if (isTeamNotFull(team)) {\n        setTeam(R.append(pokedex_number, team));\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }))), pokemon))), React.createElement(Grid.Column, {\n    width: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    basic: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Segment.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, R.compose( //map applies a function every element in the array and returns the transformed array (not mutated)\n  R.map(teamMemberSegment), R.map(getPokemon))(team))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/m_vpham/Desktop/Projects/pokedexAfterRUHacks/src/App.js"],"names":["React","useState","Grid","Segment","Header","Button","Icon","R","pokemon","getPokemon","desiredPokedexNumber","isDesiredPokemon","propEq","find","teamMemberSegment","name","pokedex_number","App","team","setTeam","isTeamNotFull","compose","not","equals","length","map","event","data","console","log","append"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {Grid, Segment, Header, Button, Icon} from 'semantic-ui-react'\nimport * as R from 'ramda'\n\n//name of the array is pokemon\nimport pokemon from './pokemonDatabase.json'\n// Define a function that returns a pokemon give pokedex_number, if true will return the desiredPokemon\nconst getPokemon = desiredPokedexNumber => {\n  //Have to assign function to a const to use with another input later on (curry)\n  const isDesiredPokemon = R.propEq(\"pokedex_number\", desiredPokedexNumber)\n  return R.find(isDesiredPokemon)(pokemon)\n}\n\n//destructuring objects in the curly braces\n//curly braces defines the object\nconst teamMemberSegment = ({name, pokedex_number}) => (\n  //if you iterate in react, each component needs a unique key\n  <Segment key={pokedex_number} floated='right'>\n    {name}\n    <Button floated='right' size=\"small\">\n      <Icon name='close' labelPosition='right'/>\n    </Button>\n    { }\n  </Segment>\n)\n\n\nfunction App() {\n  // You have to use react state in a component\n  // team: the state variable\n  // setTeam: the function that assigns the value to team\n  // [stateVariableName, setStateVariableName]\n  // team: array of pokedex_number\n  const [team, setTeam] = useState([])\n  // isTeamFull: [] => Bool\n  //compose is f(g(x)) => r.equals(6)(R.length(x))\n  //do the function inside first then apply it to function f\n  //Ramda will automatically curry\n  const isTeamNotFull = R.compose(\n    R.not,\n    R.equals(6),\n    R.length\n  )\n  return (\n    <Grid>\n      <Grid.Row>\n        <Grid.Column width={10}>\n          <Segment basic>\n          {\n            R.map(\n              ({name, pokedex_number}) => (\n                <Segment key={pokedex_number} basic>\n                  <Segment attached>\n                    <Header content={`${pokedex_number} ${name}`} />\n                  </Segment>\n                  <Button.Group attached=\"bottom\">\n                    <Button>Info</Button>\n                    <Button content=\"Add to team\"\n                      onClick={\n                        (event, data) => {\n                          console.log(event, data)\n                          if (isTeamNotFull(team)) {\n                            setTeam(R.append(pokedex_number, team))\n                          }\n                        }\n                      }\n\n                    />\n                  </Button.Group>\n                </Segment>\n              ),\n              pokemon\n            )\n          }\n          </Segment>\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <Segment basic>\n            <Segment.Group>\n              {\n                R.compose(\n                  //map applies a function every element in the array and returns the transformed array (not mutated)\n                  R.map(teamMemberSegment),\n                  R.map(getPokemon)\n                )(team)\n              }\n              {/* {JSON.stringify(team)} */}\n            </Segment.Group>\n          </Segment>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}